# Name of the service
name: Speakeasy
# Version of the service
version: $SERVICE_TAG
# Description of the service
description: Emulates x86 and amd64 Windows executables and PIE shellcode files via Speakeasy, and analyzes the generated report for malware indicators.

config:
  # A list of Windows API function names that the service will flag as suspicious if called during emulation.
  SUS_APIS: [
    "CreateRemoteThread", "URLDownloadToFileA", "URLDownloadToFileW",
    "InternetOpenUrlA", "InternetOpenUrlW", "Socket", "Connect", "Send", "Receive",
    "CreateProcessA", "CreateProcessW", "ShellExecuteA", "ShellExecuteW", "system",
    "RegOpenKeyExA", "RegOpenKeyExW", "RegCreateKeyExA", "RegCreateKeyExW",
    "RegSetValueExA", "RegSetValueExW", "RegDeleteKeyA", "RegDeleteKeyW",
    "CreateFileA", "CreateFileW", "WriteFile", "ReadFile", "DeleteFileA", "DeleteFileW",
    "CopyFileA", "CopyFileW", "MoveFileA", "MoveFileW", "WriteProcessMemory",
    "ReadProcessMemory", "SetWindowsHookExA", "SetWindowsHookExW",
    "RegisterStartupApp", "CreateServiceA", "CreateServiceW", "StartServiceA", "StartServiceW",
    "IsDebuggerPresent", "CheckRemoteDebuggerPresent", "NtQueryInformationProcess"
  ]
  # List of DLLs to monitor loading of from LoadLibraryA/W
  SUS_DLLS: [
    "SHELL32.dll", "ADVAPI32.dll", "OLEAUT32.dll", "ole32.dll",
    "COMCTL32.dll", "ntdll.dll", "gdiplus.dll", "UxTheme.dll"
  ]
  # Threshold for flagging excessive GetProcAddress calls in the second half of execution.
  GETPROCADDR_THRESHOLD: 15
  # Should emulate all entrypoints and exports? If false, will only emulate the main entrypoint
  EMULATE_ALL_ENTRYPOINTS: true
  # Should emulate children processes created by the executable?
  EMULATE_CHILDREN: true
  # Max File Size (bytes) to analyze. Default 52428800 (50MB)
  MAX_FILE_SIZE: 52428800
  # Architecture to emulate (For shellcode only). Supported: amd64, x86
  SHELLCODE_ARCH: "amd64"

# Regex defining the types of files the service accepts and rejects
accepts: code/shell|executable/windows/.*

# At which stage the service should run (one of FILTER, EXTRACT, CORE, SECONDARY, POST, REVIEW)
# NOTE: Stages are executed in the order defined in the list
stage: CORE
# Which category the service is part of (one of Antivirus, Dynamic Analysis, External, Extraction, Filtering, Internet Connected, Networking, Static Analysis)
category: Dynamic Analysis

# Does the service require access to the file to perform its task
# If set to false, the service will only have access to the file metadata (e.g. Hashes, size, type, ...)
file_required: true
# Maximum execution time the service has before it's considered to be timed out
timeout: 480

# is the service enabled by default
enabled: true

# Service heuristic blocks: List of heuristic objects that define the different heuristics used in the service
heuristics:
  - heur_id: 1
    name: Multiple TLS Callbacks Detected
    score: 100
    filetype: "*"
    description: The process contains more than one TLS callbacks. Multiple TLS callbacks are rare in legitimate software but common in malware for executing code before the main entry point to evade detection.
  - heur_id: 2
    name: VirtualAlloc with Execute/Write Permissions
    score: 200
    filetype: "*"
    description: The process allocates memory with both execute and write permissions. Malware often allocates memory with execute permissions to inject code.
  - heur_id: 3
    name: Loads Potentially Suspicious DLL
    score: 300
    filetype: "*"
    description: The process loads a DLL using either 'LoadLibraryA' or 'LoadLibraryW' that is specified in the SUS_DLLS configuration variable.
  - heur_id: 4
    name: High Number of GetProcAddress Calls
    score: 400
    filetype: "*"
    description: The process makes excessive number of calls to GetProcAddress in the second half of execution. Malware often dynamically resolves APIs late in execution after unpacking/decryption.
  - heur_id: 5
    name: Calls Suspicious API Function
    score: 300
    filetype: "*"
    description: The process calls an API function that is specified in the SUS_APIS configuration variable.
  - heur_id: 6
    name: Dynamic Code Segments Detected
    score: 130
    filetype: "*"
    description: The process creates or modifies code segments at runtime. Malware often generates code at runtime to evade static analysis.
  - heur_id: 7
    name: Shellcode Detected
    score: 1000
    filetype: "*"
    description: File is a shellcode blob and successfully emulated.
  - heur_id: 8
    name: Shellcode Network Activity Detected
    score: 1000
    filetype: "*"
    description: Shellcode successfully performed network activity.
  - heur_id: 9
    name: Network Activity Detected
    score: 100
    filetype: "executable/windows"
    description: The PE file performs network activity.

# Docker configuration block which defines:
#  - the name of the docker container that will be created
#  - CPU and ram allocation by the container
docker_config:
  image: ${REGISTRY}testing/assemblyline-service-speakeasy:$SERVICE_TAG
  cpu_cores: 1.0
  ram_mb: 1024
